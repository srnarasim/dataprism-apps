import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.BfZpEXV5.js";const k=JSON.parse('{"title":"Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"guide/architecture.md","filePath":"guide/architecture.md","lastUpdated":1753453501000}'),t={name:"guide/architecture.md"};function r(l,s,p,h,o,c){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h1><p>Understanding DataPrism&#39;s hybrid architecture design.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>DataPrism Core uses a hybrid architecture that combines the best of WebAssembly for performance and JavaScript for flexibility.</p><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Browser Application] --&gt; B[JavaScript Orchestration Layer]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C[WebAssembly Core Engine]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[DuckDB-WASM]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; E[Analytics Engine]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; F[Plugin System]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    F --&gt; G[Out-of-Box Plugins]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    F --&gt; H[Custom Plugins]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; I[LLM Integration]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="core-components" tabindex="-1">Core Components <a class="header-anchor" href="#core-components" aria-label="Permalink to &quot;Core Components&quot;">​</a></h2><h3 id="_1-webassembly-core-engine" tabindex="-1">1. WebAssembly Core Engine <a class="header-anchor" href="#_1-webassembly-core-engine" aria-label="Permalink to &quot;1. WebAssembly Core Engine&quot;">​</a></h3><p>The performance-critical components are implemented in Rust and compiled to WebAssembly:</p><ul><li><strong>Data Processing</strong>: High-performance data transformations</li><li><strong>Query Engine</strong>: SQL query execution via DuckDB</li><li><strong>Memory Management</strong>: Efficient memory allocation and cleanup</li><li><strong>Analytics Functions</strong>: Statistical and mathematical operations</li></ul><h3 id="_2-javascript-orchestration-layer" tabindex="-1">2. JavaScript Orchestration Layer <a class="header-anchor" href="#_2-javascript-orchestration-layer" aria-label="Permalink to &quot;2. JavaScript Orchestration Layer&quot;">​</a></h3><p>The coordination layer provides:</p><ul><li><strong>API Management</strong>: Clean JavaScript interfaces</li><li><strong>Asynchronous Coordination</strong>: Promise-based async operations</li><li><strong>Error Handling</strong>: Comprehensive error management</li><li><strong>Browser Integration</strong>: DOM manipulation and event handling</li></ul><h3 id="_3-plugin-system" tabindex="-1">3. Plugin System <a class="header-anchor" href="#_3-plugin-system" aria-label="Permalink to &quot;3. Plugin System&quot;">​</a></h3><p>Extensible architecture for custom functionality:</p><ul><li><strong>Plugin Framework</strong>: Base classes and interfaces</li><li><strong>Security Sandbox</strong>: Isolated execution environment</li><li><strong>Resource Management</strong>: Memory and CPU resource limits</li><li><strong>Event System</strong>: Plugin communication and lifecycle management</li></ul><h2 id="performance-characteristics" tabindex="-1">Performance Characteristics <a class="header-anchor" href="#performance-characteristics" aria-label="Permalink to &quot;Performance Characteristics&quot;">​</a></h2><h3 id="memory-management" tabindex="-1">Memory Management <a class="header-anchor" href="#memory-management" aria-label="Permalink to &quot;Memory Management&quot;">​</a></h3><ul><li><strong>Shared Memory</strong>: Efficient data sharing between WASM and JS</li><li><strong>Garbage Collection</strong>: Automatic memory cleanup</li><li><strong>Memory Limits</strong>: Configurable memory usage constraints</li><li><strong>Streaming</strong>: Support for processing large datasets</li></ul><h3 id="query-performance" tabindex="-1">Query Performance <a class="header-anchor" href="#query-performance" aria-label="Permalink to &quot;Query Performance&quot;">​</a></h3><ul><li><strong>Columnar Storage</strong>: Optimized for analytical queries</li><li><strong>Vectorized Operations</strong>: SIMD-optimized computations</li><li><strong>Query Optimization</strong>: Intelligent query planning</li><li><strong>Caching</strong>: Result and computation caching</li></ul><h2 id="browser-integration" tabindex="-1">Browser Integration <a class="header-anchor" href="#browser-integration" aria-label="Permalink to &quot;Browser Integration&quot;">​</a></h2><h3 id="webassembly-loading" tabindex="-1">WebAssembly Loading <a class="header-anchor" href="#webassembly-loading" aria-label="Permalink to &quot;WebAssembly Loading&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Lazy loading for optimal performance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> engine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataPrismEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wasmPath: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/dataprism.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lazy: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="memory-sharing" tabindex="-1">Memory Sharing <a class="header-anchor" href="#memory-sharing" aria-label="Permalink to &quot;Memory Sharing&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Efficient data transfer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sharedBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SharedArrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Float64Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sharedBuffer);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> engine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">processData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="security-model" tabindex="-1">Security Model <a class="header-anchor" href="#security-model" aria-label="Permalink to &quot;Security Model&quot;">​</a></h2><h3 id="sandbox-isolation" tabindex="-1">Sandbox Isolation <a class="header-anchor" href="#sandbox-isolation" aria-label="Permalink to &quot;Sandbox Isolation&quot;">​</a></h3><ul><li><strong>WASM Sandbox</strong>: WebAssembly provides native sandboxing</li><li><strong>Plugin Isolation</strong>: Each plugin runs in isolated context</li><li><strong>Resource Limits</strong>: CPU and memory usage constraints</li><li><strong>Permission System</strong>: Capability-based security</li></ul><h3 id="data-protection" tabindex="-1">Data Protection <a class="header-anchor" href="#data-protection" aria-label="Permalink to &quot;Data Protection&quot;">​</a></h3><ul><li><strong>Local Processing</strong>: Data never leaves the browser</li><li><strong>Encryption</strong>: Optional data encryption at rest</li><li><strong>Access Control</strong>: Fine-grained permission system</li></ul><h2 id="scalability" tabindex="-1">Scalability <a class="header-anchor" href="#scalability" aria-label="Permalink to &quot;Scalability&quot;">​</a></h2><h3 id="horizontal-scaling" tabindex="-1">Horizontal Scaling <a class="header-anchor" href="#horizontal-scaling" aria-label="Permalink to &quot;Horizontal Scaling&quot;">​</a></h3><ul><li><strong>Web Workers</strong>: Multi-threaded processing</li><li><strong>Service Workers</strong>: Background processing</li><li><strong>SharedArrayBuffer</strong>: Efficient data sharing across threads</li></ul><h3 id="vertical-scaling" tabindex="-1">Vertical Scaling <a class="header-anchor" href="#vertical-scaling" aria-label="Permalink to &quot;Vertical Scaling&quot;">​</a></h3><ul><li><strong>Memory Optimization</strong>: Efficient memory usage patterns</li><li><strong>CPU Optimization</strong>: Vectorized operations and SIMD</li><li><strong>Storage Optimization</strong>: Compressed data formats</li></ul><h2 id="development-patterns" tabindex="-1">Development Patterns <a class="header-anchor" href="#development-patterns" aria-label="Permalink to &quot;Development Patterns&quot;">​</a></h2><h3 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> engine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SELECT * FROM data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;WASM_ERROR&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Handle WebAssembly errors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SQL_ERROR&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Handle SQL query errors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="resource-management" tabindex="-1">Resource Management <a class="header-anchor" href="#resource-management" aria-label="Permalink to &quot;Resource Management&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Automatic resource cleanup</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> engine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataPrismEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> engine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... use engine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Cleanup is automatic, but can be explicit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> engine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="/dataprism-apps/docs/guide/wasm-engine">WebAssembly Engine Details</a></li><li><a href="/dataprism-apps/docs/guide/duckdb">DuckDB Integration</a></li><li><a href="/dataprism-apps/docs/plugins/development">Plugin Development</a></li><li><a href="/dataprism-apps/docs/guide/performance">Performance Optimization</a></li></ul>`,42)]))}const g=a(t,[["render",r]]);export{k as __pageData,g as default};
